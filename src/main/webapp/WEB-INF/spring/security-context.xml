<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:s="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
   <!-- Root Context: defines shared resources visible to all other web components -->
   
   <!-- *** 스프링 시큐리티 적용 
      => root~~~에 설정 해야함.
      => 스프링 시큐리티가 제공하는 JSP용 JSTL 라이브러리가 정상 작동되도록 하기위함.  
      
      1. Namespaces security 추가 및 설정
      => 04행: security 대신 짧게 sec로 설정함  
      
      2. http 설정
      => 스프링 시큐리티 설정의 핵심으로 거의 모든 설정을 처리함.
      => use-expressions="true"
         : intercept-url 의 access 속성에서 스프링시큐리티가 제공하는
           SpEL(스프링 표현식)의 사용을 허용 
           이를 이용하면 접근IP제한 등 보다더 다양한 접근제한 설정이 가능함.  
         use-expressions="false"
            : 단순 문자열만 이용가능     
      
      ** intercept-url
      => 접근 권한 설정, 작성된 순서대로 적용됨. (한번 적용되면 뒤 건에 일치해도 적용되지않음) 
      => pattern : 접근경로를 Ant 패턴으로 설정     
      => access : 해당 경로 패턴에 누가 접근 가능한지를 설정
      
      * Ant 패턴
      => Ant는 자바 기반의 빌드 도구로서 ?, *, ** 을 이용하여 경로 패턴을 명시하고 있으며,
         BeanNameUrlHandlerMapping과 SimpleUrlHandlerMapping은 Ant 경로패턴을
         이용하여 요청 URL과 컨트롤러의 매핑을 처리하고 있다.
         -> ?  : 1개의 문자와 매칭
         -> *  : 0개 이상의 문자와 매칭
         -> ** : 0개 이상의 디렉터리와 매칭
         
      ** form-login
      => 인증된 사용자만 허용되는 자원경로에 접근할때 로그인폼을 보여준다.
         로그인폼에서 id 와 password 를 전송하면, 로그인 인증 처리를 한다.
         
      ** form-logout      
      => 로그아웃 처리
   -->
	<s:http use-expressions="true" auto-config="true">
		<s:intercept-url pattern="/a*"
						 access="hasAuthority('ROLE_ADMIN')" />
		<!-- access의 Value (SpEL_스프링 표현식)
	         => hasAuthority(''), hasRole('') 는 동일의미
	            : admin으로 시작하는 경로는 'ROLE_ADMIN' 권한을 가진 사용자만 접근가능
	         => isAuthenticated() : 인증된 사용자만 접근가능     
	         => permitAll : 누구나 접근가능
	    -->
		<s:intercept-url pattern="/b*"
						 access="hasRole('ROLE_USER')" />
		<s:intercept-url pattern="/mp*"
						 access="isAuthenticated()" />
		<s:intercept-url pattern="/**"
						 access="permitAll" />
		<s:access-denied-handler error-page="/accessError"/>
		<s:form-login/>
	</s:http>
   
	<s:authentication-manager>
		<s:authentication-provider>
			<s:user-service>
            <s:user name="banana" password="1111!" 
                    authorities="ROLE_USER"/>   
            <!-- authorities: 사용자의 권한목록 지정, 
                          위의 intercept-url access속성에서 사용
                          즉, 아래 admin 은 '/a', '/b' 로 시작되는 모든경로 접근가능 -->
            <s:user name="admin" password="2222!"  
                  authorities="ROLE_ADMIN,ROLE_USER"/>      
			</s:user-service>
		</s:authentication-provider>
	</s:authentication-manager>
   
</beans>