<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.ncs.green, service, util" />
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 ** Image Upload & Download
		 1) Upload : MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />	
	</beans:bean>
	<!-- 
		=> id , name 변경 불가능 
			: 대부분의 Resolver로 끝나는 클래스의 경우에는 이미 정해져있기 때문에 변경불가능.
		=> maxUploadSize 는 지정하지 않으면 default 값은 -1 이며 크기 무제한 이 됨. 
	 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 ** JsonView  -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" /> 
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- ** Image DownLoad 
	    => 다운로드를 처리할 뷰 클래스 등록
   		=> id="download" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다. 	-->
	<beans:bean id="download" class="downTest.DownloadView"/> 
	 
	 <!-- 
** BeanNameViewResolver
	=> id 에 해당하는 Bean이 View 를 처리하도록 해주는 ViewResolver 
	   컨트롤러에서  mv.setViewName("download") 하게되면  
	   일반적인 경우 InternalResourceViewResolver 에 의해  views/download.jsp 를 찾음,
	   그러나  jsp 가 아닌 형태의  response 를 처리하는 경우에는 한 이 경우에는 "download" 와
	   동일한  id 로 생성된 Bean 을 찾아 response 를 처리함
	=> 그래서   ViewResolver 들 간의 우선순위가 팔요함 ( 아래  property order 참고 ) 
	=> 사용예 : "jsonView" , ImageDownLoad 의 "download" 

** property order 
    => 두개이상 존재하는 viewResolver 를 위해서 우선순위를 매기는 것.
            우선순위를 명시 하지 않으면 "가장 낮은 우선순위를 갖게 된다."
            우선순위는 "0"이 가장 먼저 실행되고, 이후로 매겨지는 순서에 따라 실행된다.
    => 그  다음 viewResolver가 실행 기준은 "null" 이 반환되느냐 가 기준이다. 
            그래서 null 값이 있을수 없는 InternalResourceViewResolver 가 우선순위가 높게 되면,
            다른 viewResolver는 사용되지 않기 때문에 (항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문)
      InternalResourceViewResolver 은 우선순위가 가장 낮아야 한다. 
--> 

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	      ** Mybatis (DAO 역할을 xml 로 정의)  
	      => JDBC Connection, Mybatis 설정 : Sql 구문 등..      
	      => Namespaces (jdbc , mybatis 추가)    -->
      
	<!-- 1) JDBC Connection  -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl" />
		<beans:property name="username" value="test" />
		<beans:property name="password" value="1234" />
	</beans:bean>  
	
	<!-- 2) Mybatis 설정
			=> SqlSessionFactory -> SqlSessionTemplate 
		 2.1) SqlSessionFactory
			- MyBatis 와 연동시  DB 연결과 SQL 실행의 핵심 클래스
			- SqlSessionFactoryBean 에 의해 생성됨 -->   
		<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />

		<!-- MyBatis 설정 파일의 위치를 지정  : 스프링 동작시 같이 동작 하도록 --> 
        <beans:property name="configLocation" value="classpath:/mybatis-config.xml" /> 
		<!-- SQL을 작성 해놓은 xml 파일 (mapper) 의 위치를 지정합니다. --> 
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" /> 
		<!-- mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식하도록 해줌 -->
	</beans:bean>   
   
	<!-- 2.2) SqlSessionTemplate
			- SqlSession (interface) 구현클래스
			- DAO 의 DB연결 & Close 기능, 
			- Mapper의 Sql 구문을 이용해 DAO의 요청을 처리
			- sqlSessionFactory 를 생성자로 주입해서 설정  -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache" >
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	*** 스프링 트랜잭션 설정의 특징
		=> XML 기반 적용만 가능
		=> <aop:aspect>는 사용할 수 없고 <aop:advisor> 를 사용해야함
	      ( 둘은 같은기능 이지만 사용 속성이 다르며 스프링 트랜잭션 관리에 사용되는 어드바이스의 경우
	          우리가 메서드명을 알 수 없기 때문에  <aop:advisor> 를 사용함 )  -->
	   
	 <!-- 1. 트랜잭션 관리자 클래스 등록  :
	 	  => PlattformTransactionManager 인터페이스를 구현한 클래스 들
	      => DataSourceTransactionManager : JDBC, Mybatis 모두 지원 
	      => commit, rollback 지원  -->
   
	<beans:bean id="txManager" 
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>      
	</beans:bean>
	
	<!-- 2. Transaction 관리 Advice 설정
		 => 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성 -->
		 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="sel*" read-only="true"/>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
   
	<!-- 3. AOP 설정
		 해당 비즈니스 메서드 실행 후 트랜잭션 관리 어드바이스가 동작하도록 해줌  -->
	<aop:config>
		<aop:pointcut expression="execution(* com.ncs.green.*.mjoin(..))" id="myPoint"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPoint"/>
	</aop:config>
	
	<!-- Exception 설정 -->
	<beans:bean id="exceptionResolver" 
			class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<beans:property name="exceptionMappings">
		<beans:props> 
		<!-- 스프링 하에서 발생된 Exception 은 Spring 의  Exception 객체를 사용해야 정확하게 인식함 -->   
			<beans:prop key="org.springframework.dao.DuplicateKeyException">
				errorPage/dupExceptionMessage</beans:prop>
			<beans:prop key="org.springframework.jdbc.UncategorizedSQLException">
				errorPage/sqlexceptionMessage</beans:prop>
			<beans:prop key="java.lang.IllegalArgumentException">
				errorPage/ilexceptionMessage</beans:prop>	
			<beans:prop key="java.lang.ArithmeticException">
				errorPage/arexceptionMessage</beans:prop>
			<beans:prop key="java.lang.NullPointerException">
				errorPage/npException</beans:prop>
		</beans:props>
	</beans:property>
	<beans:property name="defaultErrorView" 
					value="errorPage/exceptionMessage" />
	</beans:bean>
	
</beans:beans>
